generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  password        String
  aiUsageCount    Int      @default(0)
  lastAiUsageDate DateTime @default(now())
  createdAt       DateTime @default(now())
  resumes         Resume[]
}

model Resume {
  resumeId        String           @id @default(uuid())
  email           String
  title           String
  userId          Int
  createdAt       DateTime         @default(now())
  modifiedAt      DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  PersonalDetails PersonalDetails?
  Experience      Experience[]
  Education       Education[]
  Skills          Skills?
  Projects        Projects[]
  SectionOrder    SectionOrder?
}

model PersonalDetails {
  id        String @id @default(uuid())
  resumeId  String @unique
  firstName String @default("")
  lastName  String @default("")
  phone     String @default("")
  email     String @default("")
  github    String @default("")
  portfolio String @default("")
  linkedin  String @default("")

  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())
  resume     Resume   @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)
}

model Experience {
  resumeResumeId   String
  position         String   @default("")
  id               String   @id @default(uuid())
  company          String   @default("")
  location         String   @default("")
  startDate        String   @default("")
  endDate          String   @default("")
  isPresent        String   @default("")
  responsibilities String   @default("")
  createdAt        DateTime @default(now())
  modifiedAt       DateTime @default(now())
  Resume           Resume?  @relation(fields: [resumeResumeId], references: [resumeId], onDelete: Cascade)
}

model Education {
  resumeResumeId String
  institution    String   @default("")
  id             String   @id @default(uuid())
  degree         String   @default("")
  graduationYear String   @default("")
  location       String   @default("")
  createdAt      DateTime @default(now())
  modifiedAt     DateTime @default(now())
  Resume         Resume?  @relation(fields: [resumeResumeId], references: [resumeId], onDelete: Cascade)
}

model Skills {
  resumeResumeId String   @unique
  id             String   @id @default(uuid())
  languages      String[] @default([])
  frameworks     String[] @default([])
  developerTools String[] @default([])
  createdAt      DateTime @default(now())
  modifiedAt     DateTime @default(now())
  Resume         Resume   @relation(fields: [resumeResumeId], references: [resumeId], onDelete: Cascade)
}

model Projects {
  resumeResumeId String
  title          String   @default("")
  techStack      String   @default("")
  id             String   @id @default(uuid())
  startDate      String   @default("")
  endDate        String   @default("")
  description    String   @default("")
  createdAt      DateTime @default(now())
  modifiedAt     DateTime @default(now())
  Resume         Resume?  @relation(fields: [resumeResumeId], references: [resumeId], onDelete: Cascade)
}

model SectionOrder {
  id             String   @id @default(uuid())
  resumeResumeId String   @unique
  order          String[]
  Resume         Resume   @relation(fields: [resumeResumeId], references: [resumeId], onDelete: Cascade)
}
